"use strict";(()=>{async function n(r){try{return await(await fetch(r)).json()}catch(e){console.error("Error doing fetch query to URL",r,e)}}function i(r){return parseFloat(r).toLocaleString("en-US",{maximumFractionDigits:0})}function o(){return new URL(window.location.href).pathname.split("/").pop()}function s(r){let e=new Date(r);return new Intl.DateTimeFormat("en-US").format(e)}window.addEventListener("alpine:init",function(){window.Alpine.data("carbonAccountingRegistry",()=>({retired:"0",accumulated:"0",async init(){let r=o(),e;try{e=await n(`https://offset-service.greenstory.ca/api/v1/offset/project/${r}?content=full&lang_code=en`)}catch(c){console.error("Error in querying for registry data",c);return}let t=e.project_metric_configs[0].project_registry_balances[0].issued,a=e.project_metric_configs[0].project_registry_balances[0].retired;this.retired=i(t),this.accumulated=i(a)}})),window.Alpine.data("transactionsLog",()=>({projectID:o(),type:void 0,page:1,rowCount:5,transactionData:[],buttonText:"See more",isLoading:!0,loadingText:"Loading...",isError:!1,areTransactionsAvailable:!0,transactionRow:{":key"(){return`${this.rowIndex}_${this.id}`}},async init(){if(await this.$nextTick(),!this.type){console.error('No type set on the `transactionsLog` module. Initialize it as either "retiral" or "transactions"');return}await this.fetchData()},async fetchData(){let r={retiral:`https://offset-service.greenstory.ca/api/v1/offset/project/${this.projectID}/issuance?page=${this.page}&limit=${this.rowCount}`,transactions:`https://offset-service.greenstory.ca/api/v1/offset/retiral?project_id=${this.projectID}&page=${this.page}&limit=${this.rowCount}`};this.isLoading=!0,this.isError=!1;let e;try{e=await n(r[this.type])}catch(t){this.isLoading=!1,this.isError=!0;return}if(this.isLoading=!1,!e){this.isError=!0;return}try{this.type==="retiral"?e.result.forEach(t=>{let a={id:t.id,date:s(parseInt(t.project_issuance.issuance_time)),quantity:i(t.value),transactionID:t.transaction_guid,documentURL:t.project_issuance.certificate};this.transactionData.push(a)}):e.result.forEach(t=>{let a={id:t.id,date:s(parseInt(t.project_retiral.retiral_time)*1e3),quantity:parseFloat(t.value).toLocaleString("en-US",{maximumFractionDigits:3}),transactionID:t.transaction_guid};this.transactionData.push(a)})}catch(t){console.error(t),this.transactionData.length>0?this.areTransactionsAvailable=!1:this.isError=!0;return}},async loadMore(){this.page+=1,this.fetchData()}}))});})();
